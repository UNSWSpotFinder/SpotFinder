definitions:
  Spot.Basic:
    type: object
  User.CodeStructData:
    properties:
      code:
        description: Code 验证码
        type: string
      to:
        type: string
    type: object
  User.CreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      rePassword:
        type: string
    required:
    - email
    - name
    - password
    - phone
    - rePassword
    type: object
  User.RequestData:
    properties:
      to:
        example: longsizhuo@gmail.com
        format: emailconfigs
        type: string
    required:
    - to
    type: object
info:
  contact: {}
paths:
  /index:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /spot/create:
    post:
      consumes:
      - application/json
      description: create a spot
      parameters:
      - description: spot info
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spot.Basic'
      produces:
      - application/json
      responses:
        "200":
          description: message", "Add spot successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to add spot"}
          schema:
            type: string
      summary: Create a spot
      tags:
      - spots
  /spot/delete/{id}:
    put:
      consumes:
      - application/json
      description: delete a spot by id
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
        "500":
          description: code", "message"}
          schema:
            type: string
      summary: Delete a spot(soft delete)
      tags:
      - spots
  /spot/list:
    get:
      consumes:
      - application/json
      description: get list of all spots(will do page query later)
      produces:
      - application/json
      responses:
        "200":
          description: 'message: list of spots'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: Cannot get spot list'
          schema:
            additionalProperties: true
            type: object
      summary: Get the list of spots
      tags:
      - spots
  /spot/update:
    put:
      consumes:
      - application/json
      description: update a spot
      parameters:
      - description: spot info
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spot.Basic'
      produces:
      - application/json
      responses:
        "200":
          description: message", "Update spot successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to update spot"}
          schema:
            type: string
      summary: Update a spot
      tags:
      - spots
  /user/create:
    post:
      description: do ping
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.CreateUserRequest'
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 创建用户
      tags:
      - User
  /user/create/sendEmail:
    post:
      consumes:
      - application/json
      description: 发送验证码到指定邮箱，并存储验证码到Redis
      parameters:
      - description: Recipient emailconfigs address
        format: emailconfigs
        in: body
        name: emailconfigs
        required: true
        schema:
          $ref: '#/definitions/User.RequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Send code
      tags:
      - User
  /user/list:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 获取用户列表
      tags:
      - User
  /verify:
    post:
      consumes:
      - application/json
      description: Verify the code/
      parameters:
      - description: Recipient emailconfigs address
        format: emailconfigs
        in: body
        name: emailconfigs
        required: true
        schema:
          $ref: '#/definitions/User.CodeStructData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: unmarshal error
          schema:
            type: string
      summary: Verify code
      tags:
      - User
swagger: "2.0"
