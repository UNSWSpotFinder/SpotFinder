definitions:
  Manager.AdminInfo:
    properties:
      adminID:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  Manager.createManagerRequestData:
    properties:
      adminID:
        example: "123456"
        type: string
      name:
        example: longsizhuo
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: "123456"
        type: string
      repassword:
        example: "123456"
        type: string
    required:
    - adminID
    - name
    type: object
  Manager.loginRequestData:
    properties:
      adminID:
        example: longsizhuoIsTheBest
        type: string
      password:
        example: "123456"
        type: string
    required:
    - adminID
    type: object
  Message.WSMessage:
    properties:
      content:
        type: string
      receiverId:
        type: integer
    type: object
  Models.TimeRange:
    properties:
      Tid:
        example: "1712312421231"
        type: string
      distance:
        description: Distance 时间差
        example: "28"
        type: string
      endDate:
        example: "2024-04-02T15:00:00.000Z"
        type: string
      startDate:
        example: "2024-04-02T13:00:00.000Z"
        type: string
    required:
    - Tid
    - distance
    - endDate
    - startDate
    type: object
  Order.CreateRequest:
    properties:
      bookingTime:
        items:
          $ref: '#/definitions/Models.TimeRange'
        type: array
      carID:
        type: integer
      cost:
        type: number
    required:
    - bookingTime
    - carID
    - cost
    type: object
  Spots.CreateSpotRequestData:
    properties:
      availableTime:
        type: string
      charge:
        type: string
      isDayRent:
        type: boolean
      isOurRent:
        type: boolean
      isWeekRent:
        type: boolean
      morePictures:
        type: string
      orderNum:
        type: integer
      passWay:
        type: string
      pictures:
        type: string
      pricePerDay:
        type: number
      pricePerHour:
        type: number
      pricePerWeek:
        type: number
      size:
        type: string
      spotAddr:
        type: string
      spotName:
        type: string
      spotType:
        type: string
    type: object
  User.CodeStructData:
    properties:
      code:
        description: Code 验证码
        type: string
      email:
        type: string
    type: object
  User.CreateUserRequest:
    properties:
      avatar:
        type: string
      dateBirth:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      rePassword:
        type: string
    required:
    - email
    - name
    - password
    - phone
    - rePassword
    type: object
  User.InfoDetail:
    properties:
      account:
        example: 0
        type: number
      addr:
        example: ""
        type: string
      avatar:
        example: avata
        type: string
      carInfo:
        example: '{}'
        type: string
      createTime:
        example: "2021-07-01 00:00:00"
        type: string
      dateBirth:
        example: 25/02/1999
        type: string
      deleteTime:
        example: "2021-07-01 00:00:00"
        type: string
      earning:
        example: 0
        type: number
      email:
        example: longsizhuo@gmail.com
        type: string
      leasedSpot:
        example: '{}'
        type: string
      name:
        example: longsizhuo
        type: string
      ownedSpot:
        example: '{}'
        type: string
      phone:
        example: "123456"
        type: string
      topUp:
        example: 0
        type: number
    required:
    - name
    type: object
  User.ModifyUserInfoData:
    properties:
      address:
        example: address
        type: string
      avata:
        example: avata
        type: string
      dateBirth:
        example: 25/02/1999
        type: string
      email:
        description: Email 不能被修改，不能在这里修改，是主键
        example: longsizhuo@gmail.com
        type: string
      name:
        example: longsizhuo
        type: string
      phone:
        example: "123456"
        type: string
    type: object
  User.RequestData:
    properties:
      to:
        example: longsizhuo@gmail.com
        format: emailconfigs
        type: string
    required:
    - to
    type: object
  User.TopUpRequest:
    properties:
      amount:
        type: number
    required:
    - amount
    type: object
  User.loginRequestData:
    properties:
      email:
        example: longsizhuo@gmail.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  User.modifyPasswordData:
    properties:
      email:
        example: longsizhuo@gmail.com
        type: string
      password:
        type: string
      repassword:
        type: string
    type: object
  controller.CreateCarRequestData:
    properties:
      brand:
        example: Toyota
        type: string
      charge:
        example: "No"
        type: string
      picture:
        example: Please use https://tool.jisuapi.com/pic2base64.html to convert the
          picture to base64 and then paste it here
        type: string
      plate:
        example: NSW123456
        type: string
      size:
        example: medium
        type: string
      type:
        example: Bike
        type: string
    type: object
info:
  contact: {}
paths:
  /authorization:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: pingpong example
      tags:
      - example
  /car/create:
    post:
      consumes:
      - application/json
      description: do ping
      parameters:
      - description: 车辆信息
        in: body
        name: carInfo
        required: true
        schema:
          $ref: '#/definitions/controller.CreateCarRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 创建车辆
      tags:
      - Cars
  /car/deleteCar/{carID}:
    delete:
      consumes:
      - application/json
      description: 删除车辆
      parameters:
      - description: CarID
        in: path
        name: carID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Vehicle deleted
          schema:
            type: string
        "500":
          description: SQL error message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 删除车辆
      tags:
      - Cars
  /car/getCar/{carID}:
    get:
      consumes:
      - application/json
      description: 通过车辆ID获取车辆
      parameters:
      - description: 车辆ID
        in: path
        name: carID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: car", "car"}
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 获取车辆
      tags:
      - Cars
  /car/getMyCar:
    get:
      consumes:
      - application/json
      description: 从car的表中获取用户的车辆，而不是从user的表中获取
      produces:
      - application/json
      responses:
        "200":
          description: cars", "cars"}
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 获取用户的车辆
      tags:
      - Cars
  /car/modifyCarInfo/{carID}:
    post:
      consumes:
      - application/json
      description: 修改车辆信息
      parameters:
      - description: CarID
        in: path
        name: carID
        required: true
        type: string
      - description: 车辆信息
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/controller.CreateCarRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Vehicle information updated
          schema:
            type: string
        "400":
          description: Data binding error
          schema:
            type: string
        "500":
          description: SQL error message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 修改车辆信息
      tags:
      - Cars
  /index:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /login:
    post:
      consumes:
      - application/json
      description: 登陆
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.loginRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            type: string
      summary: 登陆
      tags:
      - User
  /manager/approve/{spotId}:
    post:
      consumes:
      - application/json
      description: 审核车位，用的是URL参数，一次只能查询一辆哦
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot approved
          schema:
            type: string
        "500":
          description: Cannot approve spot
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 审核车位
      tags:
      - Manager
  /manager/block/{spotId}:
    put:
      consumes:
      - application/json
      description: 审核车位，用的是URL参数，一次只能查询一辆哦
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot approved
          schema:
            type: string
        "500":
          description: Cannot approve spot
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 把车位ban掉
      tags:
      - Manager
  /manager/create:
    post:
      consumes:
      - application/json
      description: 创建管理员
      parameters:
      - description: Manager
        in: body
        name: manager
        required: true
        schema:
          $ref: '#/definitions/Manager.createManagerRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Manager created
          schema:
            type: string
      summary: 创建管理员
      tags:
      - Manager
  /manager/invisible/{spotId}:
    put:
      consumes:
      - application/json
      description: 审核车位，用的是URL参数，一次只能查询一辆哦
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot approved
          schema:
            type: string
        "500":
          description: Cannot approve spot
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 隐藏车位
      tags:
      - Manager
  /manager/login:
    post:
      consumes:
      - application/json
      description: 管理员登陆
      parameters:
      - description: Manager
        in: body
        name: manager
        required: true
        schema:
          $ref: '#/definitions/Manager.loginRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            type: string
      summary: 管理员登陆
      tags:
      - Manager
  /manager/unblock/{spotId}:
    put:
      consumes:
      - application/json
      description: 审核车位，用的是URL参数，一次只能查询一辆哦
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot approved
          schema:
            type: string
        "500":
          description: Cannot approve spot
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 把车位unban掉
      tags:
      - Manager
  /order/{orderID}:
    get:
      consumes:
      - application/json
      description: 获取订单信息
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order info
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
        "500":
          description: Unable to get order info
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 获取订单信息
      tags:
      - Order
  /order/{orderID}/cancel:
    put:
      consumes:
      - application/json
      description: 客户取消订单，执行软删除
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order canceled successfully
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
        "500":
          description: Unable to cancel order
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 取消订单
      tags:
      - Order
  /order/{orderID}/refund:
    put:
      consumes:
      - application/json
      description: 退款订单
      parameters:
      - description: Order ID
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order refunded successfully
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
        "500":
          description: Unable to refund order
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 退款订单
      tags:
      - Order
  /spot/{spotId}:
    get:
      consumes:
      - application/json
      description: 获取车位详情
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot details
          schema:
            type: string
        "500":
          description: Cannot get spot details
          schema:
            type: string
      summary: 获取车位详情
      tags:
      - Spots
  /spot/create:
    post:
      consumes:
      - application/json
      description: create a spot
      parameters:
      - description: spot info
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spots.CreateSpotRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: message", "Add spot successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to add spot"}
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a spot
      tags:
      - Spots
  /spot/list:
    get:
      consumes:
      - application/json
      description: 获取车位列表
      parameters:
      - default: false
        description: Is the spot visible
        in: query
        name: isVisible
        type: boolean
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 15
        description: Number of spots per page for pagination
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: An example of a successful response
          schema:
            type: string
        "500":
          description: Cannot get spot list
          schema:
            type: string
      summary: 获取车位列表
      tags:
      - Spots
  /spot/modifySpotInfo/{spotId}:
    post:
      consumes:
      - application/json
      description: 修改车位信息
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      - description: Spot information
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spots.CreateSpotRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Spot information updated
          schema:
            type: string
        "400":
          description: Data binding error
          schema:
            type: string
        "500":
          description: SQL error message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 修改车位信息
      tags:
      - Spots
  /spots/{spotID}/orders:
    post:
      consumes:
      - application/json
      description: 创建订单
      parameters:
      - description: Spot ID
        in: path
        name: spotID
        required: true
        type: integer
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/Order.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            type: string
        "500":
          description: unable to create order
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 创建订单
      tags:
      - Order
  /user/create:
    post:
      description: do ping
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.CreateUserRequest'
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 创建用户
      tags:
      - User
  /user/create/sendEmail:
    post:
      consumes:
      - application/json
      description: 发送验证码到指定邮箱，并存储验证码到Redis
      parameters:
      - description: Recipient emailconfigs address
        format: emailconfigs
        in: body
        name: emailconfigs
        required: true
        schema:
          $ref: '#/definitions/User.RequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Send code
      tags:
      - User
  /user/create/verifyEmail:
    post:
      consumes:
      - application/json
      description: Verify the code/
      parameters:
      - description: email and code
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/User.CodeStructData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: unmarshal error
          schema:
            type: string
      summary: Verify code
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/json
      description: 获取用户信息。如果未提供email查询参数，则返回当前用户的信息。如果提供了email查询参数，只有管理员可以查询其他用户的信息。
      parameters:
      - description: 要查询的用户邮箱
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取管理员信息
          schema:
            $ref: '#/definitions/Manager.AdminInfo'
        "400":
          description: 错误的请求
        "401":
          description: 未授权或无权限
        "500":
          description: 内部服务器错误
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - User
  /user/list:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 获取用户列表
      tags:
      - User
  /user/modifyPasswd:
    post:
      consumes:
      - application/json
      description: 修改密码
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/User.modifyPasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated
          schema:
            type: string
      summary: 修改密码
      tags:
      - User
  /user/modifyUserInfo:
    post:
      consumes:
      - application/json
      description: 修改用户信息
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.ModifyUserInfoData'
      produces:
      - application/json
      responses:
        "200":
          description: User information updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 修改用户信息
      tags:
      - User
  /user/orders/asOwner:
    get:
      consumes:
      - application/json
      description: 获取指定车位主的所有订单
      produces:
      - application/json
      responses:
        "200":
          description: Orders
          schema:
            type: string
        "404":
          description: No orders found for the owner
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 获取车位主所有订单
      tags:
      - Order
  /user/orders/asUser:
    get:
      consumes:
      - application/json
      description: 获取用户所有订单
      produces:
      - application/json
      responses:
        "200":
          description: Orders
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
        "500":
          description: Unable to get orders
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 获取用户所有订单
      tags:
      - Order
  /user/simpleInfo/{id}:
    get:
      consumes:
      - application/json
      description: 获取用户简单信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information updated
          schema:
            type: string
      summary: 获取用户简单信息
      tags:
      - User
  /user/topUp:
    post:
      consumes:
      - application/json
      description: 充值
      parameters:
      - description: 充值金额
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.TopUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User information updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 充值
      tags:
      - User
  /user/withdraw:
    post:
      consumes:
      - application/json
      description: 提现
      parameters:
      - description: 提现金额
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.TopUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User information updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 提现
      tags:
      - User
  /ws:
    get:
      consumes:
      - application/json
      description: Upgrades the HTTP connection to a WebSocket connection to handle
        real-time communication.
      parameters:
      - description: WebSocket message
        in: body
        name: WSMessage
        required: true
        schema:
          $ref: '#/definitions/Message.WSMessage'
      produces:
      - application/json
      responses:
        "101":
          description: Upgraded to WebSocket protocol.
          schema:
            type: string
        "400":
          description: Bad request, cannot upgrade to WebSocket.
          schema:
            type: string
        "500":
          description: Internal server error.
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: WebSocket communication endpoint
      tags:
      - websocket
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
