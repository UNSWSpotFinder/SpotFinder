definitions:
  Manager.AdminInfo:
    properties:
      adminID:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  Manager.createManagerRequestData:
    properties:
      adminID:
        example: "123456"
        type: string
      name:
        example: longsizhuo
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: "123456"
        type: string
      repassword:
        example: "123456"
        type: string
    required:
    - adminID
    - name
    type: object
  Manager.loginRequestData:
    properties:
      adminID:
        example: longsizhuoIsTheBest
        type: string
      password:
        example: "123456"
        type: string
    required:
    - adminID
    type: object
  Spot.Basic:
    type: object
  Spots.createSpotRequestData:
    properties:
      availableTime:
        type: string
      charge:
        type: string
      isDayRent:
        type: boolean
      isOurRent:
        type: boolean
      isWeekRent:
        type: boolean
      morePictures:
        type: string
      orderNum:
        type: integer
      passWay:
        type: string
      pictures:
        type: string
      pricePerDay:
        type: number
      pricePerHour:
        type: number
      pricePerWeek:
        type: number
      size:
        type: string
      spotAddr:
        type: string
      spotName:
        type: string
    type: object
  User.CodeStructData:
    properties:
      code:
        description: Code 验证码
        type: string
      email:
        type: string
    type: object
  User.CreateUserRequest:
    properties:
      avatar:
        type: string
      dateBirth:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      rePassword:
        type: string
    required:
    - email
    - name
    - password
    - phone
    - rePassword
    type: object
  User.InfoDetail:
    properties:
      account:
        example: 0
        type: number
      addr:
        example: ""
        type: string
      avatar:
        example: avata
        type: string
      carInfo:
        example: '{}'
        type: string
      createTime:
        example: "2021-07-01 00:00:00"
        type: string
      dateBirth:
        example: 25/02/1999
        type: string
      deleteTime:
        example: "2021-07-01 00:00:00"
        type: string
      earning:
        example: 0
        type: number
      email:
        example: longsizhuo@gmail.com
        type: string
      leasedSpot:
        example: '{}'
        type: string
      name:
        example: longsizhuo
        type: string
      ownedSpot:
        example: '{}'
        type: string
      phone:
        example: "123456"
        type: string
      topUp:
        example: 0
        type: number
    required:
    - name
    type: object
  User.ModifyUserInfoData:
    properties:
      address:
        example: address
        type: string
      avata:
        example: avata
        type: string
      dateBirth:
        example: 25/02/1999
        type: string
      email:
        description: Email 不能被修改，不能在这里修改，是主键
        example: longsizhuo@gmail.com
        type: string
      name:
        example: longsizhuo
        type: string
      phone:
        example: "123456"
        type: string
    type: object
  User.RequestData:
    properties:
      to:
        example: longsizhuo@gmail.com
        format: emailconfigs
        type: string
    required:
    - to
    type: object
  User.loginRequestData:
    properties:
      email:
        example: longsizhuo@gmail.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  User.modifyPasswordData:
    properties:
      email:
        example: longsizhuo@gmail.com
        type: string
      password:
        type: string
      repassword:
        type: string
    type: object
info:
  contact: {}
paths:
  /authorization:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: pingpong example
      tags:
      - example
  /index:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /login:
    post:
      consumes:
      - application/json
      description: 登陆
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.loginRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            type: string
      summary: 登陆
      tags:
      - User
  /manager/create:
    post:
      consumes:
      - application/json
      description: 创建管理员
      parameters:
      - description: Manager
        in: body
        name: manager
        required: true
        schema:
          $ref: '#/definitions/Manager.createManagerRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Manager created
          schema:
            type: string
      summary: 创建管理员
      tags:
      - Manager
  /manager/login:
    post:
      consumes:
      - application/json
      description: 管理员登陆
      parameters:
      - description: Manager
        in: body
        name: manager
        required: true
        schema:
          $ref: '#/definitions/Manager.loginRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            type: string
      summary: 管理员登陆
      tags:
      - Manager
  /spot/{spotId}:
    get:
      consumes:
      - application/json
      description: 获取车位详情
      parameters:
      - description: Spot ID
        in: path
        name: spotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot details
          schema:
            type: string
        "500":
          description: Cannot get spot details
          schema:
            type: string
      summary: 获取车位详情
      tags:
      - Spots
  /spot/create:
    post:
      consumes:
      - application/json
      description: create a spot
      parameters:
      - description: spot info
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spots.createSpotRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: message", "Add spot successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to add spot"}
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a spot
      tags:
      - Spots
  /spot/delete/{id}:
    put:
      consumes:
      - application/json
      description: delete a spot by id
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
        "500":
          description: code", "message"}
          schema:
            type: string
      summary: Delete a spot(soft delete)
      tags:
      - spots
  /spot/list:
    get:
      consumes:
      - application/json
      description: 获取车位列表
      produces:
      - application/json
      responses:
        "200":
          description: Spot list
          schema:
            type: string
        "500":
          description: Cannot get spot list
          schema:
            type: string
      summary: 获取车位列表
      tags:
      - Spots
  /spot/ownedCar/choseSize/{plateNumber}:
    get:
      consumes:
      - application/json
      description: chose size with my car, 默认用的是longsizhuo数据库的第18号用户的ID做测试
      parameters:
      - description: Plate Number
        in: path
        name: plateNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: spots", "list of spots"}
          schema:
            type: string
        "500":
          description: error", "unable to get spot list"}
          schema:
            type: string
      summary: Chose size with user's car plate number,param is plate number
      tags:
      - spots
  /spot/ownedList/{ownerId}:
    get:
      consumes:
      - application/json
      description: show all owned spots by User
      parameters:
      - description: Owner ID
        in: path
        name: ownerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: spots", "list of spots"}
          schema:
            type: string
        "500":
          description: error", "unable to get spot list"}
          schema:
            type: string
      summary: Show all owned spots
      tags:
      - spots
  /spot/update:
    put:
      consumes:
      - application/json
      description: update a spot
      parameters:
      - description: spot info
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/Spot.Basic'
      produces:
      - application/json
      responses:
        "200":
          description: message", "Update spot successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to update spot"}
          schema:
            type: string
      summary: Update a spot
      tags:
      - spots
  /spot/update/spotPrice:
    put:
      consumes:
      - application/json
      description: 'update a spot''s price, got four query parameters by order: spotID,
        perDay, perNight, perMonth 。默认用的是longsizhuo数据库的第18号用户的ID做测试'
      parameters:
      - description: Spot ID
        in: query
        name: spotID
        required: true
        type: string
      - description: Price per day
        in: query
        name: perDay
        required: true
        type: string
      - description: Price per night
        in: query
        name: perNight
        required: true
        type: string
      - description: Price per month
        in: query
        name: perMonth
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message", "Update spot price successfully"}
          schema:
            type: string
        "500":
          description: error", "unable to update spot price"}
          schema:
            type: string
      summary: Update a spot's price
      tags:
      - spots
  /user/create:
    post:
      description: do ping
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.CreateUserRequest'
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 创建用户
      tags:
      - User
  /user/create/sendEmail:
    post:
      consumes:
      - application/json
      description: 发送验证码到指定邮箱，并存储验证码到Redis
      parameters:
      - description: Recipient emailconfigs address
        format: emailconfigs
        in: body
        name: emailconfigs
        required: true
        schema:
          $ref: '#/definitions/User.RequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Send code
      tags:
      - User
  /user/create/verifyEmail:
    post:
      consumes:
      - application/json
      description: Verify the code/
      parameters:
      - description: email and code
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/User.CodeStructData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User.RequestData'
        "400":
          description: unmarshal error
          schema:
            type: string
      summary: Verify code
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/json
      description: 获取用户信息。如果未提供email查询参数，则返回当前用户的信息。如果提供了email查询参数，只有管理员可以查询其他用户的信息。
      parameters:
      - description: 要查询的用户邮箱
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取管理员信息
          schema:
            $ref: '#/definitions/Manager.AdminInfo'
        "400":
          description: 错误的请求
        "401":
          description: 未授权或无权限
        "500":
          description: 内部服务器错误
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - User
  /user/list:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: code", "message"}
          schema:
            type: string
      summary: 获取用户列表
      tags:
      - User
  /user/modifyPasswd:
    post:
      consumes:
      - application/json
      description: 修改密码
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/User.modifyPasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 修改密码
      tags:
      - User
  /user/modifyUserInfo:
    post:
      consumes:
      - application/json
      description: 修改用户信息
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User.ModifyUserInfoData'
      produces:
      - application/json
      responses:
        "200":
          description: User information updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 修改用户信息
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
